//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//
// Template used API+CLI
// https://github.com/csjones/SwagGen-templates
//

import Foundation

public class V0UserProfileDataModel: APIModel {

    public var avatarURL: String?

    public var createdAt: String?

    public var dataId: Int?

    public var email: String?

    public var hasUsedOrganizationTrial: Bool?

    public var slug: String?

    public var unconfirmedEmail: String?

    public var username: String?

    public init(avatarURL: String? = nil, createdAt: String? = nil, dataId: Int? = nil, email: String? = nil, hasUsedOrganizationTrial: Bool? = nil, slug: String? = nil, unconfirmedEmail: String? = nil, username: String? = nil) {
        self.avatarURL = avatarURL
        self.createdAt = createdAt
        self.dataId = dataId
        self.email = email
        self.hasUsedOrganizationTrial = hasUsedOrganizationTrial
        self.slug = slug
        self.unconfirmedEmail = unconfirmedEmail
        self.username = username
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        avatarURL = try container.decodeIfPresent("avatar_url")
        createdAt = try container.decodeIfPresent("created_at")
        dataId = try container.decodeIfPresent("data_id")
        email = try container.decodeIfPresent("email")
        hasUsedOrganizationTrial = try container.decodeIfPresent("has_used_organization_trial")
        slug = try container.decodeIfPresent("slug")
        unconfirmedEmail = try container.decodeIfPresent("unconfirmed_email")
        username = try container.decodeIfPresent("username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(avatarURL, forKey: "avatar_url")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(dataId, forKey: "data_id")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(hasUsedOrganizationTrial, forKey: "has_used_organization_trial")
        try container.encodeIfPresent(slug, forKey: "slug")
        try container.encodeIfPresent(unconfirmedEmail, forKey: "unconfirmed_email")
        try container.encodeIfPresent(username, forKey: "username")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? V0UserProfileDataModel else { return false }
      guard self.avatarURL == object.avatarURL else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.dataId == object.dataId else { return false }
      guard self.email == object.email else { return false }
      guard self.hasUsedOrganizationTrial == object.hasUsedOrganizationTrial else { return false }
      guard self.slug == object.slug else { return false }
      guard self.unconfirmedEmail == object.unconfirmedEmail else { return false }
      guard self.username == object.username else { return false }
      return true
    }

    public static func == (lhs: V0UserProfileDataModel, rhs: V0UserProfileDataModel) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
